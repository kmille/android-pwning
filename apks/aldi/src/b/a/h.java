package b.a;

import b.h.c;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.RandomAccess;

@b.j(a={1, 1, 13}, b={"\000\001\n\000\n\002\020 \n\000\n\002\020\021\n\000\n\002\020\013\n\002\020\030\n\002\020\005\n\002\020\022\n\002\020\f\n\002\020\031\n\002\020\006\n\002\020\023\n\002\020\007\n\002\020\024\n\002\020\b\n\002\020\025\n\002\020\t\n\002\020\026\n\002\020\n\n\002\020\027\n\002\b\003\n\002\030\002\n\002\030\002\n\002\b\f\n\002\020\016\n\002\b\024\n\002\020\002\n\002\b\004\n\002\030\002\n\002\b\003\n\002\020\037\n\002\b\005\n\002\020\036\n\002\b\004\n\002\020\017\n\002\b\006\n\002\030\002\n\002\b\f\032#\020\000\032\b\022\004\022\002H\0020\001\"\004\b\000\020\002*\n\022\006\b\001\022\002H\0020\003¢\006\002\020\004\032\020\020\000\032\b\022\004\022\0020\0050\001*\0020\006\032\020\020\000\032\b\022\004\022\0020\0070\001*\0020\b\032\020\020\000\032\b\022\004\022\0020\t0\001*\0020\n\032\020\020\000\032\b\022\004\022\0020\0130\001*\0020\f\032\020\020\000\032\b\022\004\022\0020\r0\001*\0020\016\032\020\020\000\032\b\022\004\022\0020\0170\001*\0020\020\032\020\020\000\032\b\022\004\022\0020\0210\001*\0020\022\032\020\020\000\032\b\022\004\022\0020\0230\001*\0020\024\032U\020\025\032\0020\017\"\004\b\000\020\002*\n\022\006\b\001\022\002H\0020\0032\006\020\026\032\002H\0022\032\020\027\032\026\022\006\b\000\022\002H\0020\030j\n\022\006\b\000\022\002H\002`\0312\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017¢\006\002\020\034\0329\020\025\032\0020\017\"\004\b\000\020\002*\n\022\006\b\001\022\002H\0020\0032\006\020\026\032\002H\0022\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017¢\006\002\020\035\032&\020\025\032\0020\017*\0020\b2\006\020\026\032\0020\0072\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017\032&\020\025\032\0020\017*\0020\n2\006\020\026\032\0020\t2\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017\032&\020\025\032\0020\017*\0020\f2\006\020\026\032\0020\0132\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017\032&\020\025\032\0020\017*\0020\0162\006\020\026\032\0020\r2\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017\032&\020\025\032\0020\017*\0020\0202\006\020\026\032\0020\0172\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017\032&\020\025\032\0020\017*\0020\0222\006\020\026\032\0020\0212\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017\032&\020\025\032\0020\017*\0020\0242\006\020\026\032\0020\0232\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017\0322\020\036\032\0020\005\"\004\b\000\020\002*\n\022\006\b\001\022\002H\0020\0032\016\020\037\032\n\022\006\b\001\022\002H\0020\003H\f¢\006\004\b \020!\032\"\020\"\032\0020\017\"\004\b\000\020\002*\n\022\006\b\001\022\002H\0020\003H\b¢\006\004\b#\020$\032\"\020%\032\0020&\"\004\b\000\020\002*\n\022\006\b\001\022\002H\0020\003H\b¢\006\004\b'\020(\0320\020)\032\0020\005\"\004\b\000\020\002*\n\022\006\b\001\022\002H\0020\0032\016\020\037\032\n\022\006\b\001\022\002H\0020\003H\f¢\006\002\020!\032\025\020)\032\0020\005*\0020\0062\006\020\037\032\0020\006H\f\032\025\020)\032\0020\005*\0020\b2\006\020\037\032\0020\bH\f\032\025\020)\032\0020\005*\0020\n2\006\020\037\032\0020\nH\f\032\025\020)\032\0020\005*\0020\f2\006\020\037\032\0020\fH\f\032\025\020)\032\0020\005*\0020\0162\006\020\037\032\0020\016H\f\032\025\020)\032\0020\005*\0020\0202\006\020\037\032\0020\020H\f\032\025\020)\032\0020\005*\0020\0222\006\020\037\032\0020\022H\f\032\025\020)\032\0020\005*\0020\0242\006\020\037\032\0020\024H\f\032 \020*\032\0020\017\"\004\b\000\020\002*\n\022\006\b\001\022\002H\0020\003H\b¢\006\002\020$\032\r\020*\032\0020\017*\0020\006H\b\032\r\020*\032\0020\017*\0020\bH\b\032\r\020*\032\0020\017*\0020\nH\b\032\r\020*\032\0020\017*\0020\fH\b\032\r\020*\032\0020\017*\0020\016H\b\032\r\020*\032\0020\017*\0020\020H\b\032\r\020*\032\0020\017*\0020\022H\b\032\r\020*\032\0020\017*\0020\024H\b\032 \020+\032\0020&\"\004\b\000\020\002*\n\022\006\b\001\022\002H\0020\003H\b¢\006\002\020(\032\r\020+\032\0020&*\0020\006H\b\032\r\020+\032\0020&*\0020\bH\b\032\r\020+\032\0020&*\0020\nH\b\032\r\020+\032\0020&*\0020\fH\b\032\r\020+\032\0020&*\0020\016H\b\032\r\020+\032\0020&*\0020\020H\b\032\r\020+\032\0020&*\0020\022H\b\032\r\020+\032\0020&*\0020\024H\b\032Q\020,\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\n\022\006\b\001\022\002H\0020\0032\f\020-\032\b\022\004\022\002H\0020\0032\b\b\002\020.\032\0020\0172\b\b\002\020/\032\0020\0172\b\b\002\0200\032\0020\017H\007¢\006\002\0201\0322\020,\032\0020\006*\0020\0062\006\020-\032\0020\0062\b\b\002\020.\032\0020\0172\b\b\002\020/\032\0020\0172\b\b\002\0200\032\0020\017H\007\0322\020,\032\0020\b*\0020\b2\006\020-\032\0020\b2\b\b\002\020.\032\0020\0172\b\b\002\020/\032\0020\0172\b\b\002\0200\032\0020\017H\007\0322\020,\032\0020\n*\0020\n2\006\020-\032\0020\n2\b\b\002\020.\032\0020\0172\b\b\002\020/\032\0020\0172\b\b\002\0200\032\0020\017H\007\0322\020,\032\0020\f*\0020\f2\006\020-\032\0020\f2\b\b\002\020.\032\0020\0172\b\b\002\020/\032\0020\0172\b\b\002\0200\032\0020\017H\007\0322\020,\032\0020\016*\0020\0162\006\020-\032\0020\0162\b\b\002\020.\032\0020\0172\b\b\002\020/\032\0020\0172\b\b\002\0200\032\0020\017H\007\0322\020,\032\0020\020*\0020\0202\006\020-\032\0020\0202\b\b\002\020.\032\0020\0172\b\b\002\020/\032\0020\0172\b\b\002\0200\032\0020\017H\007\0322\020,\032\0020\022*\0020\0222\006\020-\032\0020\0222\b\b\002\020.\032\0020\0172\b\b\002\020/\032\0020\0172\b\b\002\0200\032\0020\017H\007\0322\020,\032\0020\024*\0020\0242\006\020-\032\0020\0242\b\b\002\020.\032\0020\0172\b\b\002\020/\032\0020\0172\b\b\002\0200\032\0020\017H\007\032$\0202\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\003H\b¢\006\002\0203\032.\0202\032\n\022\006\022\004\030\001H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\0204\032\0020\017H\b¢\006\002\0205\032\r\0202\032\0020\006*\0020\006H\b\032\025\0202\032\0020\006*\0020\0062\006\0204\032\0020\017H\b\032\r\0202\032\0020\b*\0020\bH\b\032\025\0202\032\0020\b*\0020\b2\006\0204\032\0020\017H\b\032\r\0202\032\0020\n*\0020\nH\b\032\025\0202\032\0020\n*\0020\n2\006\0204\032\0020\017H\b\032\r\0202\032\0020\f*\0020\fH\b\032\025\0202\032\0020\f*\0020\f2\006\0204\032\0020\017H\b\032\r\0202\032\0020\016*\0020\016H\b\032\025\0202\032\0020\016*\0020\0162\006\0204\032\0020\017H\b\032\r\0202\032\0020\020*\0020\020H\b\032\025\0202\032\0020\020*\0020\0202\006\0204\032\0020\017H\b\032\r\0202\032\0020\022*\0020\022H\b\032\025\0202\032\0020\022*\0020\0222\006\0204\032\0020\017H\b\032\r\0202\032\0020\024*\0020\024H\b\032\025\0202\032\0020\024*\0020\0242\006\0204\032\0020\017H\b\0326\0206\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020\032\032\0020\0172\006\020\033\032\0020\017H\b¢\006\004\b7\0208\032\"\0206\032\0020\006*\0020\0062\006\020\032\032\0020\0172\006\020\033\032\0020\017H\b¢\006\002\b7\032\"\0206\032\0020\b*\0020\b2\006\020\032\032\0020\0172\006\020\033\032\0020\017H\b¢\006\002\b7\032\"\0206\032\0020\n*\0020\n2\006\020\032\032\0020\0172\006\020\033\032\0020\017H\b¢\006\002\b7\032\"\0206\032\0020\f*\0020\f2\006\020\032\032\0020\0172\006\020\033\032\0020\017H\b¢\006\002\b7\032\"\0206\032\0020\016*\0020\0162\006\020\032\032\0020\0172\006\020\033\032\0020\017H\b¢\006\002\b7\032\"\0206\032\0020\020*\0020\0202\006\020\032\032\0020\0172\006\020\033\032\0020\017H\b¢\006\002\b7\032\"\0206\032\0020\022*\0020\0222\006\020\032\032\0020\0172\006\020\033\032\0020\017H\b¢\006\002\b7\032\"\0206\032\0020\024*\0020\0242\006\020\032\032\0020\0172\006\020\033\032\0020\017H\b¢\006\002\b7\0325\0209\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020\032\032\0020\0172\006\020\033\032\0020\017H\001¢\006\004\b6\0208\032!\0209\032\0020\006*\0020\0062\006\020\032\032\0020\0172\006\020\033\032\0020\017H\001¢\006\002\b6\032!\0209\032\0020\b*\0020\b2\006\020\032\032\0020\0172\006\020\033\032\0020\017H\001¢\006\002\b6\032!\0209\032\0020\n*\0020\n2\006\020\032\032\0020\0172\006\020\033\032\0020\017H\001¢\006\002\b6\032!\0209\032\0020\f*\0020\f2\006\020\032\032\0020\0172\006\020\033\032\0020\017H\001¢\006\002\b6\032!\0209\032\0020\016*\0020\0162\006\020\032\032\0020\0172\006\020\033\032\0020\017H\001¢\006\002\b6\032!\0209\032\0020\020*\0020\0202\006\020\032\032\0020\0172\006\020\033\032\0020\017H\001¢\006\002\b6\032!\0209\032\0020\022*\0020\0222\006\020\032\032\0020\0172\006\020\033\032\0020\017H\001¢\006\002\b6\032!\0209\032\0020\024*\0020\0242\006\020\032\032\0020\0172\006\020\033\032\0020\017H\001¢\006\002\b6\0327\020:\032\0020;\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\0022\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017¢\006\002\020<\032&\020:\032\0020;*\0020\0062\006\020\026\032\0020\0052\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017\032&\020:\032\0020;*\0020\b2\006\020\026\032\0020\0072\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017\032&\020:\032\0020;*\0020\n2\006\020\026\032\0020\t2\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017\032&\020:\032\0020;*\0020\f2\006\020\026\032\0020\0132\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017\032&\020:\032\0020;*\0020\0162\006\020\026\032\0020\r2\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017\032&\020:\032\0020;*\0020\0202\006\020\026\032\0020\0172\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017\032&\020:\032\0020;*\0020\0222\006\020\026\032\0020\0212\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017\032&\020:\032\0020;*\0020\0242\006\020\026\032\0020\0232\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017\032-\020=\032\b\022\004\022\002H>0\001\"\004\b\000\020>*\006\022\002\b\0030\0032\f\020?\032\b\022\004\022\002H>0@¢\006\002\020A\032A\020B\032\002HC\"\020\b\000\020C*\n\022\006\b\000\022\002H>0D\"\004\b\001\020>*\006\022\002\b\0030\0032\006\020-\032\002HC2\f\020?\032\b\022\004\022\002H>0@¢\006\002\020E\032,\020F\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\002H\002¢\006\002\020G\0324\020F\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\016\020H\032\n\022\006\b\001\022\002H\0020\003H\002¢\006\002\020I\0322\020F\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\f\020H\032\b\022\004\022\002H\0020JH\002¢\006\002\020K\032\025\020F\032\0020\006*\0020\0062\006\020\026\032\0020\005H\002\032\025\020F\032\0020\006*\0020\0062\006\020H\032\0020\006H\002\032\033\020F\032\0020\006*\0020\0062\f\020H\032\b\022\004\022\0020\0050JH\002\032\025\020F\032\0020\b*\0020\b2\006\020\026\032\0020\007H\002\032\025\020F\032\0020\b*\0020\b2\006\020H\032\0020\bH\002\032\033\020F\032\0020\b*\0020\b2\f\020H\032\b\022\004\022\0020\0070JH\002\032\025\020F\032\0020\n*\0020\n2\006\020\026\032\0020\tH\002\032\025\020F\032\0020\n*\0020\n2\006\020H\032\0020\nH\002\032\033\020F\032\0020\n*\0020\n2\f\020H\032\b\022\004\022\0020\t0JH\002\032\025\020F\032\0020\f*\0020\f2\006\020\026\032\0020\013H\002\032\025\020F\032\0020\f*\0020\f2\006\020H\032\0020\fH\002\032\033\020F\032\0020\f*\0020\f2\f\020H\032\b\022\004\022\0020\0130JH\002\032\025\020F\032\0020\016*\0020\0162\006\020\026\032\0020\rH\002\032\025\020F\032\0020\016*\0020\0162\006\020H\032\0020\016H\002\032\033\020F\032\0020\016*\0020\0162\f\020H\032\b\022\004\022\0020\r0JH\002\032\025\020F\032\0020\020*\0020\0202\006\020\026\032\0020\017H\002\032\025\020F\032\0020\020*\0020\0202\006\020H\032\0020\020H\002\032\033\020F\032\0020\020*\0020\0202\f\020H\032\b\022\004\022\0020\0170JH\002\032\025\020F\032\0020\022*\0020\0222\006\020\026\032\0020\021H\002\032\025\020F\032\0020\022*\0020\0222\006\020H\032\0020\022H\002\032\033\020F\032\0020\022*\0020\0222\f\020H\032\b\022\004\022\0020\0210JH\002\032\025\020F\032\0020\024*\0020\0242\006\020\026\032\0020\023H\002\032\025\020F\032\0020\024*\0020\0242\006\020H\032\0020\024H\002\032\033\020F\032\0020\024*\0020\0242\f\020H\032\b\022\004\022\0020\0230JH\002\032,\020L\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\002H\b¢\006\002\020G\032\035\020M\032\0020;\"\004\b\000\020\002*\n\022\006\b\001\022\002H\0020\003¢\006\002\020N\032*\020M\032\0020;\"\016\b\000\020\002*\b\022\004\022\002H\0020O*\n\022\006\b\001\022\002H\0020\003H\b¢\006\002\020P\0321\020M\032\0020;\"\004\b\000\020\002*\n\022\006\b\001\022\002H\0020\0032\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017¢\006\002\020Q\032\n\020M\032\0020;*\0020\b\032\036\020M\032\0020;*\0020\b2\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017\032\n\020M\032\0020;*\0020\n\032\036\020M\032\0020;*\0020\n2\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017\032\n\020M\032\0020;*\0020\f\032\036\020M\032\0020;*\0020\f2\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017\032\n\020M\032\0020;*\0020\016\032\036\020M\032\0020;*\0020\0162\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017\032\n\020M\032\0020;*\0020\020\032\036\020M\032\0020;*\0020\0202\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017\032\n\020M\032\0020;*\0020\022\032\036\020M\032\0020;*\0020\0222\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017\032\n\020M\032\0020;*\0020\024\032\036\020M\032\0020;*\0020\0242\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017\0329\020R\032\0020;\"\004\b\000\020\002*\n\022\006\b\001\022\002H\0020\0032\032\020\027\032\026\022\006\b\000\022\002H\0020\030j\n\022\006\b\000\022\002H\002`\031¢\006\002\020S\032M\020R\032\0020;\"\004\b\000\020\002*\n\022\006\b\001\022\002H\0020\0032\032\020\027\032\026\022\006\b\000\022\002H\0020\030j\n\022\006\b\000\022\002H\002`\0312\b\b\002\020\032\032\0020\0172\b\b\002\020\033\032\0020\017¢\006\002\020T\032-\020U\032\b\022\004\022\002H\0020V\"\016\b\000\020\002*\b\022\004\022\002H\0020O*\n\022\006\b\001\022\002H\0020\003¢\006\002\020W\032?\020U\032\b\022\004\022\002H\0020V\"\004\b\000\020\002*\n\022\006\b\001\022\002H\0020\0032\032\020\027\032\026\022\006\b\000\022\002H\0020\030j\n\022\006\b\000\022\002H\002`\031¢\006\002\020X\032\020\020U\032\b\022\004\022\0020\0050V*\0020\006\032\020\020U\032\b\022\004\022\0020\0070V*\0020\b\032\020\020U\032\b\022\004\022\0020\t0V*\0020\n\032\020\020U\032\b\022\004\022\0020\0130V*\0020\f\032\020\020U\032\b\022\004\022\0020\r0V*\0020\016\032\020\020U\032\b\022\004\022\0020\0170V*\0020\020\032\020\020U\032\b\022\004\022\0020\0210V*\0020\022\032\020\020U\032\b\022\004\022\0020\0230V*\0020\024\032\025\020Y\032\b\022\004\022\0020\0050\003*\0020\006¢\006\002\020Z\032\025\020Y\032\b\022\004\022\0020\0070\003*\0020\b¢\006\002\020[\032\025\020Y\032\b\022\004\022\0020\t0\003*\0020\n¢\006\002\020\\\032\025\020Y\032\b\022\004\022\0020\0130\003*\0020\f¢\006\002\020]\032\025\020Y\032\b\022\004\022\0020\r0\003*\0020\016¢\006\002\020^\032\025\020Y\032\b\022\004\022\0020\0170\003*\0020\020¢\006\002\020_\032\025\020Y\032\b\022\004\022\0020\0210\003*\0020\022¢\006\002\020`\032\025\020Y\032\b\022\004\022\0020\0230\003*\0020\024¢\006\002\020a¨\006b"}, c={"asList", "", "T", "", "([Ljava/lang/Object;)Ljava/util/List;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "binarySearch", "element", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "fromIndex", "toIndex", "([Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Comparator;II)I", "([Ljava/lang/Object;Ljava/lang/Object;II)I", "contentDeepEquals", "other", "contentDeepEqualsInline", "([Ljava/lang/Object;[Ljava/lang/Object;)Z", "contentDeepHashCode", "contentDeepHashCodeInline", "([Ljava/lang/Object;)I", "contentDeepToString", "", "contentDeepToStringInline", "([Ljava/lang/Object;)Ljava/lang/String;", "contentEquals", "contentHashCode", "contentToString", "copyInto", "destination", "destinationOffset", "startIndex", "endIndex", "([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;", "copyOf", "([Ljava/lang/Object;)[Ljava/lang/Object;", "newSize", "([Ljava/lang/Object;I)[Ljava/lang/Object;", "copyOfRange", "copyOfRangeInline", "([Ljava/lang/Object;II)[Ljava/lang/Object;", "copyOfRangeImpl", "fill", "", "([Ljava/lang/Object;Ljava/lang/Object;II)V", "filterIsInstance", "R", "klass", "Ljava/lang/Class;", "([Ljava/lang/Object;Ljava/lang/Class;)Ljava/util/List;", "filterIsInstanceTo", "C", "", "([Ljava/lang/Object;Ljava/util/Collection;Ljava/lang/Class;)Ljava/util/Collection;", "plus", "([Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object;", "elements", "([Ljava/lang/Object;[Ljava/lang/Object;)[Ljava/lang/Object;", "", "([Ljava/lang/Object;Ljava/util/Collection;)[Ljava/lang/Object;", "plusElement", "sort", "([Ljava/lang/Object;)V", "", "([Ljava/lang/Comparable;)V", "([Ljava/lang/Object;II)V", "sortWith", "([Ljava/lang/Object;Ljava/util/Comparator;)V", "([Ljava/lang/Object;Ljava/util/Comparator;II)V", "toSortedSet", "Ljava/util/SortedSet;", "([Ljava/lang/Comparable;)Ljava/util/SortedSet;", "([Ljava/lang/Object;Ljava/util/Comparator;)Ljava/util/SortedSet;", "toTypedArray", "([Z)[Ljava/lang/Boolean;", "([B)[Ljava/lang/Byte;", "([C)[Ljava/lang/Character;", "([D)[Ljava/lang/Double;", "([F)[Ljava/lang/Float;", "([I)[Ljava/lang/Integer;", "([J)[Ljava/lang/Long;", "([S)[Ljava/lang/Short;", "kotlin-stdlib"}, d=1)
public class h
  extends g
{
  public static final <T> List<T> a(T[] paramArrayOfT)
  {
    b.f.b.j.b(paramArrayOfT, "receiver$0");
    paramArrayOfT = Arrays.asList(paramArrayOfT);
    b.f.b.j.a(paramArrayOfT, "ArraysUtilJVM.asList(this)");
    return paramArrayOfT;
  }
  
  public static final <T> T[] a(T[] paramArrayOfT, int paramInt1, int paramInt2)
  {
    b.f.b.j.b(paramArrayOfT, "receiver$0");
    int i = paramArrayOfT.length;
    if (paramInt2 <= i)
    {
      paramArrayOfT = Arrays.copyOfRange(paramArrayOfT, paramInt1, paramInt2);
      b.f.b.j.a(paramArrayOfT, "java.util.Arrays.copyOfR…this, fromIndex, toIndex)");
      return paramArrayOfT;
    }
    paramArrayOfT = new StringBuilder("toIndex (");
    paramArrayOfT.append(paramInt2);
    paramArrayOfT.append(") is greater than size (");
    paramArrayOfT.append(i);
    paramArrayOfT.append(").");
    throw ((Throwable)new IndexOutOfBoundsException(paramArrayOfT.toString()));
  }
  
  @b.j(a={1, 1, 13}, b={"\000!\n\000\n\002\030\002\n\002\020\b\n\002\030\002\n\002\030\002\n\002\b\004\n\002\020\013\n\002\b\b*\001\000\b\n\030\0002\b\022\004\022\0020\0020\0012\0060\003j\002`\004J\021\020\b\032\0020\t2\006\020\n\032\0020\002H\002J\026\020\013\032\0020\0022\006\020\f\032\0020\002H\002¢\006\002\020\rJ\020\020\016\032\0020\0022\006\020\n\032\0020\002H\026J\b\020\017\032\0020\tH\026J\020\020\020\032\0020\0022\006\020\n\032\0020\002H\026R\024\020\005\032\0020\0028VX\004¢\006\006\032\004\b\006\020\007¨\006\021"}, c={"kotlin/collections/ArraysKt___ArraysJvmKt$asList$3", "Lkotlin/collections/AbstractList;", "", "Ljava/util/RandomAccess;", "Lkotlin/collections/RandomAccess;", "size", "getSize", "()I", "contains", "", "element", "get", "index", "(I)Ljava/lang/Integer;", "indexOf", "isEmpty", "lastIndexOf", "kotlin-stdlib"})
  public static final class a
    extends b<Integer>
    implements RandomAccess
  {
    public a(int[] paramArrayOfInt) {}
    
    public final int a()
    {
      return this.b.length;
    }
    
    public final boolean contains(Object paramObject)
    {
      if (!(paramObject instanceof Integer)) {
        return false;
      }
      int i = ((Number)paramObject).intValue();
      paramObject = this.b;
      b.f.b.j.b(paramObject, "receiver$0");
      return e.b((int[])paramObject, i) >= 0;
    }
    
    public final int indexOf(Object paramObject)
    {
      if (!(paramObject instanceof Integer)) {
        return -1;
      }
      int i = ((Number)paramObject).intValue();
      return e.b(this.b, i);
    }
    
    public final boolean isEmpty()
    {
      return this.b.length == 0;
    }
    
    public final int lastIndexOf(Object paramObject)
    {
      if (!(paramObject instanceof Integer)) {
        return -1;
      }
      int i = ((Number)paramObject).intValue();
      paramObject = this.b;
      b.f.b.j.b(paramObject, "receiver$0");
      b.f.b.j.b(paramObject, "receiver$0");
      Object localObject = (Iterable)new c(0, e.a((int[])paramObject));
      b.f.b.j.b(localObject, "receiver$0");
      localObject = j.j((Iterable)localObject);
      b.f.b.j.b(localObject, "receiver$0");
      Collections.reverse((List)localObject);
      localObject = ((List)localObject).iterator();
      while (((Iterator)localObject).hasNext())
      {
        int j = ((Number)((Iterator)localObject).next()).intValue();
        if (i == paramObject[j]) {
          return j;
        }
      }
      return -1;
    }
  }
}


/* Location:              /home/kmille/projects/android-pwning/apks/aldi/ALDI TALK_v6.2.1_apkpure.com-dex2jar.jar!/b/a/h.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */