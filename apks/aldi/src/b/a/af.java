package b.a;

import b.m;
import b.r;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

@b.j(a={1, 1, 13}, b={"\000~\n\000\n\002\020\b\n\000\n\002\020$\n\002\b\003\n\002\030\002\n\002\030\002\n\000\n\002\020\021\n\002\030\002\n\002\b\002\n\002\030\002\n\002\030\002\n\002\b\006\n\002\020%\n\000\n\002\020&\n\002\b\003\n\002\020\013\n\002\030\002\n\002\b\007\n\002\030\002\n\002\b\f\n\002\030\002\n\002\b\n\n\002\020(\n\002\020)\n\002\020'\n\002\b\n\n\002\020\034\n\002\030\002\n\000\n\002\020\002\n\002\b\026\032\036\020\002\032\016\022\004\022\002H\004\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\005\0321\020\006\032\036\022\004\022\002H\004\022\004\022\002H\0050\007j\016\022\004\022\002H\004\022\004\022\002H\005`\b\"\004\b\000\020\004\"\004\b\001\020\005H\b\032_\020\006\032\036\022\004\022\002H\004\022\004\022\002H\0050\007j\016\022\004\022\002H\004\022\004\022\002H\005`\b\"\004\b\000\020\004\"\004\b\001\020\0052*\020\t\032\026\022\022\b\001\022\016\022\004\022\002H\004\022\004\022\002H\0050\0130\n\"\016\022\004\022\002H\004\022\004\022\002H\0050\013¢\006\002\020\f\0321\020\r\032\036\022\004\022\002H\004\022\004\022\002H\0050\016j\016\022\004\022\002H\004\022\004\022\002H\005`\017\"\004\b\000\020\004\"\004\b\001\020\005H\b\032_\020\r\032\036\022\004\022\002H\004\022\004\022\002H\0050\016j\016\022\004\022\002H\004\022\004\022\002H\005`\017\"\004\b\000\020\004\"\004\b\001\020\0052*\020\t\032\026\022\022\b\001\022\016\022\004\022\002H\004\022\004\022\002H\0050\0130\n\"\016\022\004\022\002H\004\022\004\022\002H\0050\013¢\006\002\020\020\032\020\020\021\032\0020\0012\006\020\022\032\0020\001H\001\032!\020\023\032\016\022\004\022\002H\004\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\005H\b\032O\020\023\032\016\022\004\022\002H\004\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\0052*\020\t\032\026\022\022\b\001\022\016\022\004\022\002H\004\022\004\022\002H\0050\0130\n\"\016\022\004\022\002H\004\022\004\022\002H\0050\013¢\006\002\020\024\032!\020\025\032\016\022\004\022\002H\004\022\004\022\002H\0050\026\"\004\b\000\020\004\"\004\b\001\020\005H\b\032O\020\025\032\016\022\004\022\002H\004\022\004\022\002H\0050\026\"\004\b\000\020\004\"\004\b\001\020\0052*\020\t\032\026\022\022\b\001\022\016\022\004\022\002H\004\022\004\022\002H\0050\0130\n\"\016\022\004\022\002H\004\022\004\022\002H\0050\013¢\006\002\020\024\032*\020\027\032\002H\004\"\004\b\000\020\004\"\004\b\001\020\005*\016\022\004\022\002H\004\022\004\022\002H\0050\030H\n¢\006\002\020\031\032*\020\032\032\002H\005\"\004\b\000\020\004\"\004\b\001\020\005*\016\022\004\022\002H\004\022\004\022\002H\0050\030H\n¢\006\002\020\031\0329\020\033\032\0020\034\"\t\b\000\020\004¢\006\002\b\035\"\004\b\001\020\005*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0032\006\020\036\032\002H\004H\n¢\006\002\020\037\0321\020 \032\0020\034\"\t\b\000\020\004¢\006\002\b\035*\016\022\006\b\001\022\002H\004\022\002\b\0030\0032\006\020\036\032\002H\004H\b¢\006\002\020\037\0327\020!\032\0020\034\"\004\b\000\020\004\"\t\b\001\020\005¢\006\002\b\035*\016\022\004\022\002H\004\022\004\022\002H\0050\0032\006\020\"\032\002H\005H\b¢\006\002\020\037\032S\020#\032\016\022\004\022\002H\004\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\005*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0032\036\020$\032\032\022\020\022\016\022\004\022\002H\004\022\004\022\002H\0050\030\022\004\022\0020\0340%H\b\032G\020&\032\016\022\004\022\002H\004\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\005*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0032\022\020$\032\016\022\004\022\002H\004\022\004\022\0020\0340%H\b\032S\020'\032\016\022\004\022\002H\004\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\005*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0032\036\020$\032\032\022\020\022\016\022\004\022\002H\004\022\004\022\002H\0050\030\022\004\022\0020\0340%H\b\032n\020(\032\002H)\"\004\b\000\020\004\"\004\b\001\020\005\"\030\b\002\020)*\022\022\006\b\000\022\002H\004\022\006\b\000\022\002H\0050\026*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0032\006\020*\032\002H)2\036\020$\032\032\022\020\022\016\022\004\022\002H\004\022\004\022\002H\0050\030\022\004\022\0020\0340%H\b¢\006\002\020+\032n\020,\032\002H)\"\004\b\000\020\004\"\004\b\001\020\005\"\030\b\002\020)*\022\022\006\b\000\022\002H\004\022\006\b\000\022\002H\0050\026*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0032\006\020*\032\002H)2\036\020$\032\032\022\020\022\016\022\004\022\002H\004\022\004\022\002H\0050\030\022\004\022\0020\0340%H\b¢\006\002\020+\032G\020-\032\016\022\004\022\002H\004\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\005*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0032\022\020$\032\016\022\004\022\002H\005\022\004\022\0020\0340%H\b\032;\020.\032\004\030\001H\005\"\t\b\000\020\004¢\006\002\b\035\"\004\b\001\020\005*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0032\006\020\036\032\002H\004H\n¢\006\002\020/\032@\0200\032\002H\005\"\004\b\000\020\004\"\004\b\001\020\005*\016\022\004\022\002H\004\022\004\022\002H\0050\0032\006\020\036\032\002H\0042\f\0201\032\b\022\004\022\002H\00502H\b¢\006\002\0203\032@\0204\032\002H\005\"\004\b\000\020\004\"\004\b\001\020\005*\016\022\004\022\002H\004\022\004\022\002H\0050\0032\006\020\036\032\002H\0042\f\0201\032\b\022\004\022\002H\00502H\b¢\006\002\0203\032@\0205\032\002H\005\"\004\b\000\020\004\"\004\b\001\020\005*\016\022\004\022\002H\004\022\004\022\002H\0050\0262\006\020\036\032\002H\0042\f\0201\032\b\022\004\022\002H\00502H\b¢\006\002\0203\0321\0206\032\002H\005\"\004\b\000\020\004\"\004\b\001\020\005*\016\022\004\022\002H\004\022\004\022\002H\0050\0032\006\020\036\032\002H\004H\007¢\006\002\020/\032<\0207\032\002H8\"\024\b\000\020)*\n\022\002\b\003\022\002\b\0030\003*\002H8\"\004\b\001\0208*\002H)2\f\0201\032\b\022\004\022\002H802H\b¢\006\002\0209\032'\020:\032\0020\034\"\004\b\000\020\004\"\004\b\001\020\005*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\003H\b\032:\020;\032\0020\034\"\004\b\000\020\004\"\004\b\001\020\005*\022\022\006\b\001\022\002H\004\022\004\022\002H\005\030\0010\003H\b\002\016\n\f\b\000\022\002\030\001\032\004\b\003\020\000\0329\020<\032\024\022\020\022\016\022\004\022\002H\004\022\004\022\002H\0050\0300=\"\004\b\000\020\004\"\004\b\001\020\005*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\003H\n\032<\020<\032\024\022\020\022\016\022\004\022\002H\004\022\004\022\002H\0050?0>\"\004\b\000\020\004\"\004\b\001\020\005*\016\022\004\022\002H\004\022\004\022\002H\0050\026H\n¢\006\002\b@\032Y\020A\032\016\022\004\022\002H8\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\005\"\004\b\002\0208*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0032\036\020B\032\032\022\020\022\016\022\004\022\002H\004\022\004\022\002H\0050\030\022\004\022\002H80%H\b\032t\020C\032\002H)\"\004\b\000\020\004\"\004\b\001\020\005\"\004\b\002\0208\"\030\b\003\020)*\022\022\006\b\000\022\002H8\022\006\b\000\022\002H\0050\026*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0032\006\020*\032\002H)2\036\020B\032\032\022\020\022\016\022\004\022\002H\004\022\004\022\002H\0050\030\022\004\022\002H80%H\b¢\006\002\020+\032Y\020D\032\016\022\004\022\002H\004\022\004\022\002H80\003\"\004\b\000\020\004\"\004\b\001\020\005\"\004\b\002\0208*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0032\036\020B\032\032\022\020\022\016\022\004\022\002H\004\022\004\022\002H\0050\030\022\004\022\002H80%H\b\032t\020E\032\002H)\"\004\b\000\020\004\"\004\b\001\020\005\"\004\b\002\0208\"\030\b\003\020)*\022\022\006\b\000\022\002H\004\022\006\b\000\022\002H80\026*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0032\006\020*\032\002H)2\036\020B\032\032\022\020\022\016\022\004\022\002H\004\022\004\022\002H\0050\030\022\004\022\002H80%H\b¢\006\002\020+\032@\020F\032\016\022\004\022\002H\004\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\005*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0032\006\020\036\032\002H\004H\002¢\006\002\020G\032H\020F\032\016\022\004\022\002H\004\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\005*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0032\016\020H\032\n\022\006\b\001\022\002H\0040\nH\002¢\006\002\020I\032A\020F\032\016\022\004\022\002H\004\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\005*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0032\f\020H\032\b\022\004\022\002H\0040JH\002\032A\020F\032\016\022\004\022\002H\004\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\005*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0032\f\020H\032\b\022\004\022\002H\0040KH\002\0322\020L\032\0020M\"\004\b\000\020\004\"\004\b\001\020\005*\016\022\004\022\002H\004\022\004\022\002H\0050\0262\006\020\036\032\002H\004H\n¢\006\002\020N\032:\020L\032\0020M\"\004\b\000\020\004\"\004\b\001\020\005*\016\022\004\022\002H\004\022\004\022\002H\0050\0262\016\020H\032\n\022\006\b\001\022\002H\0040\nH\n¢\006\002\020O\0323\020L\032\0020M\"\004\b\000\020\004\"\004\b\001\020\005*\016\022\004\022\002H\004\022\004\022\002H\0050\0262\f\020H\032\b\022\004\022\002H\0040JH\n\0323\020L\032\0020M\"\004\b\000\020\004\"\004\b\001\020\005*\016\022\004\022\002H\004\022\004\022\002H\0050\0262\f\020H\032\b\022\004\022\002H\0040KH\n\0320\020P\032\016\022\004\022\002H\004\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\005*\016\022\004\022\002H\004\022\004\022\002H\0050\003H\000\0323\020Q\032\016\022\004\022\002H\004\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\005*\020\022\004\022\002H\004\022\004\022\002H\005\030\0010\003H\b\032T\020R\032\016\022\004\022\002H\004\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\005*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0032\032\020\t\032\026\022\022\b\001\022\016\022\004\022\002H\004\022\004\022\002H\0050\0130\nH\002¢\006\002\020S\032G\020R\032\016\022\004\022\002H\004\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\005*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0032\022\020T\032\016\022\004\022\002H\004\022\004\022\002H\0050\013H\002\032M\020R\032\016\022\004\022\002H\004\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\005*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0032\030\020\t\032\024\022\020\022\016\022\004\022\002H\004\022\004\022\002H\0050\0130JH\002\032I\020R\032\016\022\004\022\002H\004\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\005*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0032\024\020U\032\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\003H\002\032M\020R\032\016\022\004\022\002H\004\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\005*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0032\030\020\t\032\024\022\020\022\016\022\004\022\002H\004\022\004\022\002H\0050\0130KH\002\032J\020V\032\0020M\"\004\b\000\020\004\"\004\b\001\020\005*\022\022\006\b\000\022\002H\004\022\006\b\000\022\002H\0050\0262\032\020\t\032\026\022\022\b\001\022\016\022\004\022\002H\004\022\004\022\002H\0050\0130\nH\n¢\006\002\020W\032=\020V\032\0020M\"\004\b\000\020\004\"\004\b\001\020\005*\022\022\006\b\000\022\002H\004\022\006\b\000\022\002H\0050\0262\022\020T\032\016\022\004\022\002H\004\022\004\022\002H\0050\013H\n\032C\020V\032\0020M\"\004\b\000\020\004\"\004\b\001\020\005*\022\022\006\b\000\022\002H\004\022\006\b\000\022\002H\0050\0262\030\020\t\032\024\022\020\022\016\022\004\022\002H\004\022\004\022\002H\0050\0130JH\n\032=\020V\032\0020M\"\004\b\000\020\004\"\004\b\001\020\005*\022\022\006\b\000\022\002H\004\022\006\b\000\022\002H\0050\0262\022\020U\032\016\022\004\022\002H\004\022\004\022\002H\0050\003H\n\032C\020V\032\0020M\"\004\b\000\020\004\"\004\b\001\020\005*\022\022\006\b\000\022\002H\004\022\006\b\000\022\002H\0050\0262\030\020\t\032\024\022\020\022\016\022\004\022\002H\004\022\004\022\002H\0050\0130KH\n\032G\020X\032\0020M\"\004\b\000\020\004\"\004\b\001\020\005*\022\022\006\b\000\022\002H\004\022\006\b\000\022\002H\0050\0262\032\020\t\032\026\022\022\b\001\022\016\022\004\022\002H\004\022\004\022\002H\0050\0130\n¢\006\002\020W\032@\020X\032\0020M\"\004\b\000\020\004\"\004\b\001\020\005*\022\022\006\b\000\022\002H\004\022\006\b\000\022\002H\0050\0262\030\020\t\032\024\022\020\022\016\022\004\022\002H\004\022\004\022\002H\0050\0130J\032@\020X\032\0020M\"\004\b\000\020\004\"\004\b\001\020\005*\022\022\006\b\000\022\002H\004\022\006\b\000\022\002H\0050\0262\030\020\t\032\024\022\020\022\016\022\004\022\002H\004\022\004\022\002H\0050\0130K\032;\020Y\032\004\030\001H\005\"\t\b\000\020\004¢\006\002\b\035\"\004\b\001\020\005*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0262\006\020\036\032\002H\004H\b¢\006\002\020/\032:\020Z\032\0020M\"\004\b\000\020\004\"\004\b\001\020\005*\016\022\004\022\002H\004\022\004\022\002H\0050\0262\006\020\036\032\002H\0042\006\020\"\032\002H\005H\n¢\006\002\020[\032;\020\\\032\016\022\004\022\002H\004\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\005*\026\022\022\b\001\022\016\022\004\022\002H\004\022\004\022\002H\0050\0130\n¢\006\002\020\024\032Q\020\\\032\002H)\"\004\b\000\020\004\"\004\b\001\020\005\"\030\b\002\020)*\022\022\006\b\000\022\002H\004\022\006\b\000\022\002H\0050\026*\026\022\022\b\001\022\016\022\004\022\002H\004\022\004\022\002H\0050\0130\n2\006\020*\032\002H)¢\006\002\020]\0324\020\\\032\016\022\004\022\002H\004\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\005*\024\022\020\022\016\022\004\022\002H\004\022\004\022\002H\0050\0130J\032O\020\\\032\002H)\"\004\b\000\020\004\"\004\b\001\020\005\"\030\b\002\020)*\022\022\006\b\000\022\002H\004\022\006\b\000\022\002H\0050\026*\024\022\020\022\016\022\004\022\002H\004\022\004\022\002H\0050\0130J2\006\020*\032\002H)¢\006\002\020^\0322\020\\\032\016\022\004\022\002H\004\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\005*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\003H\007\032M\020\\\032\002H)\"\004\b\000\020\004\"\004\b\001\020\005\"\030\b\002\020)*\022\022\006\b\000\022\002H\004\022\006\b\000\022\002H\0050\026*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\0032\006\020*\032\002H)H\007¢\006\002\020_\0324\020\\\032\016\022\004\022\002H\004\022\004\022\002H\0050\003\"\004\b\000\020\004\"\004\b\001\020\005*\024\022\020\022\016\022\004\022\002H\004\022\004\022\002H\0050\0130K\032O\020\\\032\002H)\"\004\b\000\020\004\"\004\b\001\020\005\"\030\b\002\020)*\022\022\006\b\000\022\002H\004\022\006\b\000\022\002H\0050\026*\024\022\020\022\016\022\004\022\002H\004\022\004\022\002H\0050\0130K2\006\020*\032\002H)¢\006\002\020`\0322\020a\032\016\022\004\022\002H\004\022\004\022\002H\0050\026\"\004\b\000\020\004\"\004\b\001\020\005*\020\022\006\b\001\022\002H\004\022\004\022\002H\0050\003H\007\0321\020b\032\016\022\004\022\002H\004\022\004\022\002H\0050\013\"\004\b\000\020\004\"\004\b\001\020\005*\016\022\004\022\002H\004\022\004\022\002H\0050\030H\b\"\016\020\000\032\0020\001XT¢\006\002\n\000¨\006c"}, c={"INT_MAX_POWER_OF_TWO", "", "emptyMap", "", "K", "V", "hashMapOf", "Ljava/util/HashMap;", "Lkotlin/collections/HashMap;", "pairs", "", "Lkotlin/Pair;", "([Lkotlin/Pair;)Ljava/util/HashMap;", "linkedMapOf", "Ljava/util/LinkedHashMap;", "Lkotlin/collections/LinkedHashMap;", "([Lkotlin/Pair;)Ljava/util/LinkedHashMap;", "mapCapacity", "expectedSize", "mapOf", "([Lkotlin/Pair;)Ljava/util/Map;", "mutableMapOf", "", "component1", "", "(Ljava/util/Map$Entry;)Ljava/lang/Object;", "component2", "contains", "", "Lkotlin/internal/OnlyInputTypes;", "key", "(Ljava/util/Map;Ljava/lang/Object;)Z", "containsKey", "containsValue", "value", "filter", "predicate", "Lkotlin/Function1;", "filterKeys", "filterNot", "filterNotTo", "M", "destination", "(Ljava/util/Map;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "filterTo", "filterValues", "get", "(Ljava/util/Map;Ljava/lang/Object;)Ljava/lang/Object;", "getOrElse", "defaultValue", "Lkotlin/Function0;", "(Ljava/util/Map;Ljava/lang/Object;Lkotlin/jvm/functions/Function0;)Ljava/lang/Object;", "getOrElseNullable", "getOrPut", "getValue", "ifEmpty", "R", "(Ljava/util/Map;Lkotlin/jvm/functions/Function0;)Ljava/lang/Object;", "isNotEmpty", "isNullOrEmpty", "iterator", "", "", "", "mutableIterator", "mapKeys", "transform", "mapKeysTo", "mapValues", "mapValuesTo", "minus", "(Ljava/util/Map;Ljava/lang/Object;)Ljava/util/Map;", "keys", "(Ljava/util/Map;[Ljava/lang/Object;)Ljava/util/Map;", "", "Lkotlin/sequences/Sequence;", "minusAssign", "", "(Ljava/util/Map;Ljava/lang/Object;)V", "(Ljava/util/Map;[Ljava/lang/Object;)V", "optimizeReadOnlyMap", "orEmpty", "plus", "(Ljava/util/Map;[Lkotlin/Pair;)Ljava/util/Map;", "pair", "map", "plusAssign", "(Ljava/util/Map;[Lkotlin/Pair;)V", "putAll", "remove", "set", "(Ljava/util/Map;Ljava/lang/Object;Ljava/lang/Object;)V", "toMap", "([Lkotlin/Pair;Ljava/util/Map;)Ljava/util/Map;", "(Ljava/lang/Iterable;Ljava/util/Map;)Ljava/util/Map;", "(Ljava/util/Map;Ljava/util/Map;)Ljava/util/Map;", "(Lkotlin/sequences/Sequence;Ljava/util/Map;)Ljava/util/Map;", "toMutableMap", "toPair", "kotlin-stdlib"}, d=1)
public class af
  extends ae
{
  public static final int a(int paramInt)
  {
    if (paramInt < 3) {
      return paramInt + 1;
    }
    if (paramInt < 1073741824) {
      return paramInt + paramInt / 3;
    }
    return Integer.MAX_VALUE;
  }
  
  public static final <K, V> Map<K, V> a()
  {
    w localw = w.a;
    if (localw != null) {
      return (Map)localw;
    }
    throw new r("null cannot be cast to non-null type kotlin.collections.Map<K, V>");
  }
  
  public static final <K, V> Map<K, V> a(Iterable<? extends m<? extends K, ? extends V>> paramIterable)
  {
    b.f.b.j.b(paramIterable, "receiver$0");
    if ((paramIterable instanceof Collection))
    {
      Collection localCollection = (Collection)paramIterable;
      switch (localCollection.size())
      {
      default: 
        return ac.a(paramIterable, (Map)new LinkedHashMap(ac.a(localCollection.size())));
      case 1: 
        if ((paramIterable instanceof List)) {}
        for (paramIterable = ((List)paramIterable).get(0);; paramIterable = paramIterable.iterator().next())
        {
          paramIterable = (m)paramIterable;
          break;
        }
        return ac.a(paramIterable);
      }
      return ac.a();
    }
    paramIterable = ac.a(paramIterable, (Map)new LinkedHashMap());
    b.f.b.j.b(paramIterable, "receiver$0");
    switch (paramIterable.size())
    {
    default: 
      return paramIterable;
    case 1: 
      b.f.b.j.b(paramIterable, "receiver$0");
      paramIterable = (Map.Entry)paramIterable.entrySet().iterator().next();
      paramIterable = Collections.singletonMap(paramIterable.getKey(), paramIterable.getValue());
      b.f.b.j.a(paramIterable, "java.util.Collections.singletonMap(key, value)");
      b.f.b.j.a(paramIterable, "with(entries.iterator().…ingletonMap(key, value) }");
      return paramIterable;
    }
    return ac.a();
  }
  
  public static final <K, V, M extends Map<? super K, ? super V>> M a(Iterable<? extends m<? extends K, ? extends V>> paramIterable, M paramM)
  {
    b.f.b.j.b(paramIterable, "receiver$0");
    b.f.b.j.b(paramM, "destination");
    ac.a(paramM, paramIterable);
    return paramM;
  }
  
  public static final <K, V> Map<K, V> a(m<? extends K, ? extends V>... paramVarArgs)
  {
    b.f.b.j.b(paramVarArgs, "pairs");
    if (paramVarArgs.length > 0)
    {
      Map localMap = (Map)new LinkedHashMap(ac.a(paramVarArgs.length));
      b.f.b.j.b(paramVarArgs, "receiver$0");
      b.f.b.j.b(localMap, "destination");
      ac.a(localMap, paramVarArgs);
      return localMap;
    }
    return ac.a();
  }
  
  public static final <K, V> void a(Map<? super K, ? super V> paramMap, Iterable<? extends m<? extends K, ? extends V>> paramIterable)
  {
    b.f.b.j.b(paramMap, "receiver$0");
    b.f.b.j.b(paramIterable, "pairs");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      m localm = (m)paramIterable.next();
      paramMap.put(localm.a, localm.b);
    }
  }
  
  public static final <K, V> void a(Map<? super K, ? super V> paramMap, m<? extends K, ? extends V>[] paramArrayOfm)
  {
    b.f.b.j.b(paramMap, "receiver$0");
    b.f.b.j.b(paramArrayOfm, "pairs");
    int j = paramArrayOfm.length;
    int i = 0;
    while (i < j)
    {
      m<? extends K, ? extends V> localm = paramArrayOfm[i];
      paramMap.put(localm.a, localm.b);
      i += 1;
    }
  }
}


/* Location:              /home/kmille/projects/android-pwning/apks/aldi/ALDI TALK_v6.2.1_apkpure.com-dex2jar.jar!/b/a/af.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */